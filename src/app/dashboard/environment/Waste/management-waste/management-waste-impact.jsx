'use client'
import React, { useState, useEffect, useRef } from 'react';
import { GlobalState } from '../../../../../Context/page';
import Form from '@rjsf/core';
import validator from '@rjsf/validator-ajv8';
import TextareaWidget2 from "../../../../shared/widgets/Textarea/TextareaWidget2";
import axios from 'axios';
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { Oval } from 'react-loader-spinner';
const widgets = {
    TextareaWidgetnew: TextareaWidget2,
};

const view_path = 'gri-environment-waste-306-2-management_of_significant_waste'
const client_id = 1
const user_id = 1

const schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            Q1: {
                type: "string",
                format: 'textarea',
            },
            Q2: {
                type: "string",
                format: 'textarea',
            },
            Q3: {
                type: "string",
                format: 'textarea',
            },

            // Define other properties as needed
        }
    }
};


const uiSchema = { // Add flex-wrap to wrap fields to the next line
    items: {
        Q1: {
            "ui:hadding": "Actions taken to prevent waste generation and to manage significant impacts from waste generated",
            "ui:title": "Describe actions taken to prevent waste generated from organization's own activities, upstream activities and downstream activities in its value chain",
            "ui:tooltipshadding": "Include: Actions mentioned should include actions including circularity measures.",
            "ui:tooltipstitle": "Include: Actions mentioned should include actions including circularity measures. ",
            "ui:haddingdisplay": "block",
            "ui:titlediplay": "block",
            "ui:haddingtooltipdisplay": "block",
            "ui:titletooltipdisplay": "none",
            "ui:Gri": "GRI 306-1a",
            'ui:widget': 'TextareaWidgetnew', // Use your custom widget for QuantityUnit
            'ui:options': {
                label: false // This disables the label for this field
            },
        },
        Q2: {
            "ui:hadding": "Waste Management by Third-party",
            "ui:title": "If the waste generated by the organization in its own activities is managed by a third party, describe of the processes used to determine whether the third party manages the waste in line with contractual or legislative obligations.",
            "ui:tooltipshadding": "This section documents the data corresponding to the waste generated by the organization in its own activities is managed by a third party. ",
            "ui:tooltipstitle": "Third-party: Third party includes a public or private waste management organization, or any other entity or group of individuals formally or informally involved in handling the reporting organizationâ€™s waste.Include: Agreements in a contract for the third party to follow when managing its waste, or rely on existing legislative obligations, such as local environmental laws and regulations",
            "ui:haddingdisplay": "block",
            "ui:titlediplay": "block",
            "ui:haddingtooltipdisplay": "block",
            "ui:titletooltipdisplay": "block",
            "ui:Gri": "GRI 306-1b",
            'ui:widget': 'TextareaWidgetnew', // Use your custom widget for QuantityUnit
            'ui:options': {
                label: false // This disables the label for this field
            },
        },
        Q3: {
            "ui:hadding": "Waste Management by Third-party",
            "ui:title": "Describe the processes used to collect and monitor waste-related data",
            "ui:tooltipshadding": "This section documents the data corresponding to the processes used to collect and monitor waste-related data.",
            "ui:tooltipstitle": "Please specify the processes used to collect and monitor waste-related data. Include: Processes can include online data entry, maintaining a centralized database, real-time weighbridge measurement, and annual external data validation.",
            "ui:haddingdisplay": "block",
            "ui:titlediplay": "block",
            "ui:haddingtooltipdisplay": "block",
            "ui:titletooltipdisplay": "block",
            "ui:Gri": "GRI 306-1b",
            'ui:widget': 'TextareaWidgetnew', // Use your custom widget for QuantityUnit
            'ui:options': {
                label: false // This disables the label for this field
            },
        },
        'ui:options': {
            orderable: false, // Prevent reordering of items
            addable: false, // Prevent adding items from UI
            removable: false, // Prevent removing items from UI
            layout: 'horizontal', // Set layout to horizontal
        }
    }
};
const Managementwasteimpact = ({location, year, month}) => {
    const { open } = GlobalState();
    const [formData, setFormData] = useState([{}]);
    const [r_schema, setRemoteSchema] = useState({})
    const [r_ui_schema, setRemoteUiSchema] = useState({})
    const [loopen, setLoOpen] = useState(false);
    const toastShown = useRef(false);
    const getAuthToken = () => {
        if (typeof window !== 'undefined') {
            return localStorage.getItem('token')?.replace(/"/g, "");
        }
        return '';
    };
    const token = getAuthToken();

    const LoaderOpen = () => {
      setLoOpen(true);
    };
    const LoaderClose = () => {
      setLoOpen(false);
    };
    const handleChange = (e) => {
      setFormData(e.formData);
    };

    // The below code on updateFormData
    let axiosConfig = {
      headers: {
        Authorization: 'Bearer ' + token,
      },
    };
    const updateFormData = async () => {
        const data = {
        client_id : client_id,
        user_id : user_id,
        path: view_path,
        form_data: formData,
        location,
        year,
        month
        }

        const url = `${process.env.BACKEND_API_URL}/datametric/update-fieldgroup`
        try{
        const response = await axios.post(url, data, axiosConfig);

        if (response.status === 200) {
            toast.success("Data added successfully", {
              position: "top-right",
              autoClose: 3000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "light",
            });
            LoaderClose();
            loadFormData();

          }else {
            toast.error("Oops, something went wrong", {
              position: "top-right",
              autoClose: 1000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
              theme: "colored",
            });
            LoaderClose();
          }
        } catch (error) {
          toast.error("Oops, something went wrong", {
            position: "top-right",
            autoClose: 1000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: "colored",
          });
          LoaderClose();
        }
    };

    const loadFormData = async () => {
        LoaderOpen();
        const url = `${process.env.BACKEND_API_URL}/datametric/get-fieldgroups?path_slug=${view_path}&client_id=${client_id}&user_id=${user_id}&location=${location}&year=${year}&month=${month}`;
        try {
            const response = await axios.get(url, axiosConfig);
            console.log('API called successfully:', response.data);
            setRemoteSchema(response.data.form[0].schema);
            setRemoteUiSchema(response.data.form[0].ui_schema);
            const form_parent = response.data.form_data;
            setFormData(form_parent[0].data);
        } catch (error) {
            console.error('API call failed:', error);
        } finally {
            LoaderClose();
        }
    }
    //Reloading the forms -- White Beard
    useEffect(() => {
        //console.long(r_schema, '- is the remote schema from django), r_ui_schema, '- is the remote ui schema from django')
    },[r_schema, r_ui_schema])

    // console log the form data change
    useEffect(() => {
        console.log('Form data is changed -', formData)
    },[formData])

    // fetch backend and replace initialized forms
    useEffect (()=> {
      if (location && year && month) {
          loadFormData();
          toastShown.current = false; // Reset the flag when valid data is present
      } else {
          // Only show the toast if it has not been shown already
          if (!toastShown.current) {
              toast.warn("Please select location, year, and month first", {
                  position: "top-right",
                  autoClose: 5000,
                  hideProgressBar: false,
                  closeOnClick: true,
                  pauseOnHover: true,
                  draggable: true,
                  progress: undefined,
                  theme: "colored",
              });
              toastShown.current = true; // Set the flag to true after showing the toast
          }
      }
    },[location, year, month])
    const handleSubmit = (e) => {
      e.preventDefault();
      console.log('Form data:', formData);
      updateFormData()
    };


    return (
      <>
        <div >
          <div>
          <Form
            schema={r_schema}
            uiSchema={r_ui_schema}
            formData={formData}
            onChange={handleChange}
            validator={validator}
            widgets={widgets}
          />
          </div>
          {loopen && (
          <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
            <Oval
              height={50}
              width={50}
              color="#00BFFF"
              secondaryColor="#f3f3f3"
              strokeWidth={2}
              strokeWidthSecondary={2}
            />
          </div>
        )}
        </div>
        <div className='mb-4'>
        <button type="button"  className=" text-center py-1 text-sm w-[100px] bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:shadow-outline float-end" onClick={handleSubmit}>Submit</button>
        </div>
        </>
    );
};

export default Managementwasteimpact;
